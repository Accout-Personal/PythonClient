# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from SuddivisioneLavoro.Controller.SuddivisioneLavoroC import SuddivisioneLavoroC
import SuddivisioneLavoro.View.VistaListaLavoro as listview
from SuddivisioneLavoro.View.VistaModificaLavoro import Ui_ModificaLavoro

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QWidget
from win32api import GetSystemMetrics # per prendere la risoluzione dello schermo computer

class Ui_ListaLavoro(QWidget):
    def __init__(self, parent=None):
        super(Ui_ListaLavoro, self).__init__(parent)
        self._translate = QtCore.QCoreApplication.translate
        ListaView = self
        self.controller = SuddivisioneLavoroC()
        self.key = 'codice'
        self.chiamata = self.controller.GetAll()
        ListaView.setObjectName("Lista lavori")
        ListaView.resize(800, 600)
        ListaView.setWindowTitle(self._translate("Lista lavori", "Lista lavori"))
        self.verticalLayout = QtWidgets.QVBoxLayout(ListaView)
        self.verticalLayout.setObjectName("verticalLayout")


        self.sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        self.sizePolicy.setHorizontalStretch(0)
        self.sizePolicy.setVerticalStretch(0)

        self.AddLabelTitolo("Lista delle commesse")



        self.AddScrollArea()

        self.traduzione = {
            'commessa':'N.commessa',
            'quantita_assegnata':'quantita\'',
            'data_conclusione':'conclusa nel',
            'valore_lavoro':'valore del lavoro',
            'dipendente':'diendente'
        }

        self.listAttr = [
            {'nome':'commessa','width':80},
            {'nome':'dipendente','width':200},
            {'nome':'quantita_assegnata','width':70},
            {'nome':'valore_lavoro','width':100},
            {'nome':'data_conclusione','width':90},
        ]

        #le dimensioni delle colonne
        sizes = [x['width'] for x in self.listAttr]
        #sizes = [100,50,100,200,50,100,100,100,100]
        total = sum(sizes)+500
        height = total*0.75-100 if((total*0.75)>GetSystemMetrics(1)-100) else GetSystemMetrics(1)-100
        ListaView.resize(total,height)
        for attr in range(len(self.listAttr)):
            
            #Aggiunge l'intestazione della tabella
            self.AddTableHeader(self.traduzione[self.listAttr[attr]['nome']],attr,self.listAttr[attr]['width'])
            if(self.listAttr[attr]['nome'] == 'dipendente'):
                for a in range(0,len(self.chiamata)):
                    self.AddTableContent(attr,a+1,str(self.chiamata[a]['dipendente']['nome_cognome']),self.listAttr[attr]['width'])
            else:
                for a in range(0,len(self.chiamata)):
                    self.AddTableContent(attr,a+1,str(self.chiamata[a][self.listAttr[attr]['nome']]),self.listAttr[attr]['width'])

        #Aggiunge pulsante delle operazioni
        self.OperationButtons=[
            {
                "name":"Cancella Elemento",
                "StyleSheet":"background-color: rgb(255, 0, 0);\n color: rgb(255, 255, 255);",
                "function":self.deleteConfirm
            },
            {
                "name":"Modifica Elemento",
                "StyleSheet":"background-color: rgb(0, 0, 255);\n color: rgb(255, 255, 255);",
                "function":self.Modify
            }
        ]

        X_offset = len(self.listAttr)
        for i in range(0,len(self.OperationButtons)):
            for a in range(0,len(self.chiamata)):
                #print(i)
                self.OperationButtons[i]
                self.AddOperationButton(X_offset+i,a,self.OperationButtons[i],lambda state,b=a,c=i: self.OperationButtons[c]["function"](self.chiamata[b]))
                            

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)

        QtCore.QMetaObject.connectSlotsByName(ListaView)

    #chiamata alla funzione per la cancellazione di un elemento
    def deleteConfirm(self,elemento):

        msg = QMessageBox()
        msg.setWindowTitle('Conferma')
        msg.setText('sei sicuro di voler cancellare la commessa '+str(elemento['commessa']) + ' del dipendente: '+str(elemento['dipendente']['nome_cognome']) +' ?')
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        okButton = msg.button(QMessageBox.Yes)
        noButton = msg.button(QMessageBox.No)
        okButton.setText('si')
        retval = msg.exec_()
        if(msg.clickedButton() == okButton):
            print('cancellazione confermata')
            postbody = {'dipendente':elemento['dipendente']['CF'],
                        'commessa':elemento['commessa']}
            res = self.controller.Delete(postbody)
            print(res)
            self.RefreshLista = listview.Ui_ListaLavoro()
            self.RefreshLista.show()
            self.close()
        else:
            print('cancellazione annullata')   

    #Viene settata l'intestazione della finestra
    def AddTableHeader(self,text,pos,width):
        self.header1 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.sizePolicy.setHeightForWidth(self.header1.sizePolicy().hasHeightForWidth())
        self.header1.setSizePolicy(self.sizePolicy)
        self.header1.setMinimumSize(QtCore.QSize(width, 30))
        self.header1.setObjectName("header1")
        self.header1.setText(self._translate("ListaView",text))
        self.gridLayout.addWidget(self.header1, 0, pos, 1, 1)
    
    #Questa funzione aggiunge le label alla finestra
    def AddTableContent(self,x,y,content,width):
        self.label_3 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(self.sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(width, 30))
        self.label_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        self.label_3.setText(self._translate("ListaView","   "+ content))
        self.gridLayout.addWidget(self.label_3, y, x, 1, 1)

    #Questa funzione aggiunge un bottone a cui viene collegata una particolare funzione, da attivare quando 
    # il bottone viene premuto
    def AddOperationButton(self,x,y,buttonDict,function):
        OperationButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        OperationButton.setStyleSheet(buttonDict["StyleSheet"])
        OperationButton.setObjectName("OperationButton")
        OperationButton.setText(self._translate("ListaView", buttonDict["name"]))        
        OperationButton.clicked.connect(function)
        self.gridLayout.addWidget(OperationButton, y+1, x, 1, 1)
        return OperationButton

    #TODO:cambiare le key
    def Modify(self,elem):
        #print (elem[self.key])
        self.modificaview = Ui_ModificaLavoro(elem)
        self.modificaview.show()
        self.close()
    
    #Questa funzione aggiunge una scroll area
    def AddScrollArea(self):
        self.scrollArea = QtWidgets.QScrollArea(self)
        self.scrollArea.setStyleSheet("background-color: rgb(109, 109, 109);")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 780, 524))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout.setObjectName("gridLayout")

    # In questa funzione viene impostata la label che si trova sopra la lista
    def AddLabelTitolo(self,text):
        self.label = QtWidgets.QLabel(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.label.setText(self._translate("ModificaDipAng", text))