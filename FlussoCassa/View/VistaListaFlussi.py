# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from FlussoCassa.Controller.FlussoCassaC import FlussoCassaC

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QWidget
from win32api import GetSystemMetrics # per prendere la risoluzione dello schermo computer

class Ui_ListaFlussi(QWidget):
    def __init__(self, parent=None):
        super(Ui_ListaFlussi, self).__init__(parent)
        self._translate = QtCore.QCoreApplication.translate
        ListaView = self
        self.controller = FlussoCassaC()
        self.chiamata = self.controller.GetAll()
        ListaView.setObjectName("Lista Flussi Cassa")
        ListaView.resize(800, 600)
        ListaView.setWindowTitle(self._translate("Lista Commesse", "Lista Flussi Cassa"))
        self.verticalLayout = QtWidgets.QVBoxLayout(ListaView)
        self.verticalLayout.setObjectName("verticalLayout")

        self.sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        self.sizePolicy.setHorizontalStretch(0)
        self.sizePolicy.setVerticalStretch(0)

        self.AddLabelTitolo("Lista Flussi Di Cassa")

        self.AddScrollArea()

        self.traduzione = {
        'from':'da\\a',
        'data':'data',
        'importo':'importo',
        'tipo':'tipo',
        }

        self.listAttr = [
            {'nome':'from','width':200},
            {'nome':'data','width':150},
            {'nome':'importo','width':100},
            {'nome':'tipo','width':100}
        ]
        #le dimensioni delle colonne

        sizes = [x['width'] for x in self.listAttr]
        # se contabile o non contabile
        importo = [float(x['importo']) for x in self.chiamata] 

        total = sum(sizes)+300
        height = total*0.50-100 if((total*0.50)>GetSystemMetrics(1)-100) else GetSystemMetrics(1)-100
        ListaView.resize(total,height)
        
        #DDT
        for attr in range(len(self.listAttr)):
            #Aggiunge l'intestazione della tabella
            self.AddTableHeader(self.traduzione[self.listAttr[attr]['nome']],attr,self.listAttr[attr]['width'])
        
        entrata_color = "background-color: rgb(255, 255, 255);color: rgb(54, 92, 255);"
        uscite_color = "background-color: rgb(255, 255, 255);color: rgb(214, 7, 0);"
        for a in range(0,len(self.chiamata)):
            if( float(importo[a]) < 0):
                
                self.AddTableContent(0,a+1,str(self.chiamata[a]['from']),self.listAttr[0]['width'],uscite_color)
                self.AddTableContent(1,a+1,str(self.chiamata[a]['data']),self.listAttr[1]['width'],uscite_color)
                self.AddTableContent(2,a+1,str(self.chiamata[a]['importo']),self.listAttr[2]['width'],uscite_color)
                self.AddTableContent(3,a+1,str(self.chiamata[a]['tipo']),self.listAttr[3]['width'],uscite_color)
            else:
                self.AddTableContent(0,a+1,str(self.chiamata[a]['from']),self.listAttr[0]['width'],entrata_color)
                self.AddTableContent(1,a+1,str(self.chiamata[a]['data']),self.listAttr[1]['width'],entrata_color)
                self.AddTableContent(2,a+1,str(self.chiamata[a]['importo']),self.listAttr[2]['width'],entrata_color)
                self.AddTableContent(3,a+1,str(self.chiamata[a]['tipo']),self.listAttr[3]['width'],entrata_color)

        sommatotale = sum(importo)
        entrata_totale_color = "color: rgb(54, 92, 255);"
        uscite_totale_color = "color: rgb(214, 7, 0);"
        if(sommatotale<0):
            self.AddTableContent(0,a+2,'totale importo',self.listAttr[0]['width'],uscite_totale_color)
            self.AddTableContent(2,a+2,"{:.2f}".format(sommatotale),self.listAttr[2]['width'],uscite_totale_color)
        else:
            self.AddTableContent(0,a+2,'totale importo',self.listAttr[0]['width'],entrata_totale_color)
            self.AddTableContent(2,a+2,"{:.2f}".format(sommatotale),self.listAttr[2]['width'],entrata_totale_color)
        

        self.gridLayout.setColumnStretch (4, 1)
    

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)

        QtCore.QMetaObject.connectSlotsByName(ListaView)

    #Viene settata l'intestazione della finestra
    def AddTableHeader(self,text,pos,width):
        self.header1 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.sizePolicy.setHeightForWidth(self.header1.sizePolicy().hasHeightForWidth())
        self.header1.setSizePolicy(self.sizePolicy)
        self.header1.setMinimumSize(QtCore.QSize(width, 30))
        self.header1.setObjectName("header1")
        self.header1.setText(self._translate("ListaView",text))
        self.gridLayout.addWidget(self.header1, 0, pos, 1, 1)
        self.gridLayout.setRowStretch (0, 0)
    
    #Questa funzione aggiunge le label alla finestra
    def AddTableContent(self,x,y,content,width,stylesheet = "background-color: rgb(255, 255, 255);"):
        self.label_3 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(self.sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(width, 30))
        self.label_3.setMaximumSize(QtCore.QSize(width*3, 30))
        self.label_3.setStyleSheet(stylesheet)
        self.label_3.setObjectName("label_3")
        self.label_3.setText(self._translate("ListaView","   "+ content))
        self.gridLayout.addWidget(self.label_3, y, x, 1, 1)
        self.gridLayout.setRowStretch (y, 0)
        self.gridLayout.setRowStretch (y+1, 1)

    #Questa funzione aggiunge un bottone a cui viene collegata una particolare funzione, da attivare quando 
    # il bottone viene premuto
    def AddOperationButton(self,x,y,buttonDict,function):
        OperationButton = QtWidgets.QPushButton(self.scrollAreaWidgetContents)
        OperationButton.setStyleSheet(buttonDict["StyleSheet"])
        OperationButton.setObjectName("OperationButton")
        OperationButton.setText(self._translate("ListaView", buttonDict["name"]))        
        OperationButton.clicked.connect(function)
        self.gridLayout.addWidget(OperationButton, y+1, x, 1, 1)
        return OperationButton
    
    #Questa funzione aggiunge una scroll area
    def AddScrollArea(self):
        self.scrollArea = QtWidgets.QScrollArea(self)
        self.scrollArea.setStyleSheet("background-color: rgb(109, 109, 109);")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 780, 524))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout.setObjectName("gridLayout")

    # In questa funzione viene impostata la label che si trova sopra la lista
    def AddLabelTitolo(self,text):
        self.label = QtWidgets.QLabel(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(200, 50))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.label.setText(self._translate("ModificaDipAng", text))